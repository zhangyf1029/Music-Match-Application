Why We Chose Our Frameworks

We heavily considered NodeJS as a group, but we knew that we were more versed and comfortable with Python than Javascript. Flask can allow for more experimentation throughout the overall process and allows for smaller features as well as highly specialized services, and we thought that this would be a good fit for the app we are trying to create. Flask also features a library specifically for user Log-In, which is a large portion of our application. Django does not offer much flexibility if the database you choose is not relational, so we do not want to box ourselves into a specific type of database early in our development. With this in mind, Flask will allow us to ship a higher-quality product with the limited skills and resources we have.

For the front-end, we considered React and Angular. Angular has a modular nature that allows developers to divide code into modules. Modules make it easier for the tasks to be distributed among team members, and Angular organizes the functions of the app more easily. However, Angular also has a steeper learning curve, while React primarily provides the UI tools necessary. Although there are support and resources for Flask-Angular and Flask-React applications, our group chose React. React has a material-UI library with material design components with less of a learning curve so that we can focus on functionality and design with more ease. React also supports backward compatibility. Our dating application is user-centered, and React has a strong focus on user experience, which is of priority to us. As a result, this made it a better choice for our application.
