{"version":3,"sources":["../../../../src/components/dropdown/components/item.js"],"names":["DropdownItem","active","children","value","className","props","defaultProps"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;;;;;AAEA,IAAMA,YAAY,GAAG,SAAfA,YAAe;AAAA,MAAGC,MAAH,QAAGA,MAAH;AAAA,MAAWC,QAAX,QAAWA,QAAX;AAAA,MAAqBC,KAArB,QAAqBA,KAArB;AAAA,MAA4BC,SAA5B,QAA4BA,SAA5B;AAAA,MAA0CC,KAA1C;;AAAA,sBACnB,gCAAC,mBAAD;AACE,IAAA,KAAK,EAAEF;AADT,KAEME,KAFN;AAGE,IAAA,IAAI,EAAC,cAHP;AAIE,IAAA,SAAS,EAAE,4BAAWD,SAAX,EAAsB,eAAtB,EAAuC;AAChD,mBAAaH;AADmC,KAAvC;AAJb,MAQGC,QARH,CADmB;AAAA,CAArB;;AA6BAF,YAAY,CAACM,YAAb,GAA4B,EAA5B;eAEeN,Y","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Element from '../../element';\n\nconst DropdownItem = ({ active, children, value, className, ...props }) => (\n  <Element\n    title={value}\n    {...props}\n    role=\"presentation\"\n    className={classnames(className, 'dropdown-item', {\n      'is-active': active,\n    })}\n  >\n    {children}\n  </Element>\n);\n\nDropdownItem.propTypes = {\n  /**\n   * Whether this dropdown item is currently selected.\n   * Shows a highlighted effect if true.\n   * Note that the effect only works when this item is rendered as an anchor\n   * (`<a>`).\n   */\n  active: PropTypes.bool,\n  /**\n   * The value this dropdown item holds. When this item is clicked,\n   * this value is passed to the onChange callback of `<Dropdown />`.\n   * The value is used to determine if this item is active or not.\n   */\n  value: PropTypes.any.isRequired,\n};\n\nDropdownItem.defaultProps = {};\n\nexport default DropdownItem;\n"],"file":"item.js"}