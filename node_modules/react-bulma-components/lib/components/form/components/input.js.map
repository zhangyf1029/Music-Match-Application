{"version":3,"sources":["../../../../src/components/form/components/input.js"],"names":["React","PropTypes","classnames","Element","useFieldContext","normalizeStatus","Input","className","size","color","readOnly","isStatic","status","rounded","props","context","calculatedSize","defaultProps","renderAs"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AAEA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,eAAP,MAA4B,iBAA5B;AACA,SAASC,eAAT,QAAgC,8BAAhC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OASR;AAAA;;AAAA,MARJC,SAQI,QARJA,SAQI;AAAA,MAPJC,IAOI,QAPJA,IAOI;AAAA,MANJC,KAMI,QANJA,KAMI;AAAA,MALJC,QAKI,QALJA,QAKI;AAAA,MAJJC,QAII,QAJJA,QAII;AAAA,MAHJC,MAGI,QAHJA,MAGI;AAAA,MAFJC,OAEI,QAFJA,OAEI;AAAA,MADDC,KACC;;AACJ,MAAMC,OAAO,GAAGX,eAAe,EAA/B;AACA,MAAMY,cAAc,GAAGR,IAAI,IAAIO,OAAO,CAACP,IAAvC;AACA,sBACE,oBAAC,OAAD,eACMM,KADN;AAEE,IAAA,QAAQ,EAAEJ,QAAQ,IAAIC,QAFxB;AAGE,IAAA,SAAS,EAAET,UAAU,CAAC,OAAD,EAAUK,SAAV;AACnB,mBAAaI;AADM,iDAEZN,eAAe,CAACO,MAAD,CAFH,GAEgBA,MAFhB,gCAGnB,YAHmB,EAGLC,OAHK,6CAIZG,cAJY,GAIOA,cAJP,6CAKZP,KALY,GAKFA,KALE;AAHvB,KADF;AAaD,CAzBD;;AA4EAH,KAAK,CAACW,YAAN,GAAqB;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;AAIA,eAAeZ,KAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport Element from '../../element';\nimport useFieldContext from './field/context';\nimport { normalizeStatus } from '../../../services/normalizer';\n\nconst Input = ({\n  className,\n  size,\n  color,\n  readOnly,\n  isStatic,\n  status,\n  rounded,\n  ...props\n}) => {\n  const context = useFieldContext();\n  const calculatedSize = size || context.size;\n  return (\n    <Element\n      {...props}\n      readOnly={readOnly || isStatic}\n      className={classnames('input', className, {\n        'is-static': isStatic,\n        [`is-${normalizeStatus(status)}`]: status,\n        'is-rounded': rounded,\n        [`is-${calculatedSize}`]: calculatedSize,\n        [`is-${color}`]: color,\n      })}\n    />\n  );\n};\n\nInput.propTypes = {\n  /**\n   * Adjusts the size of this input.\n   */\n  size: PropTypes.oneOfType([\n    PropTypes.oneOf(['small', 'medium', 'large']),\n    PropTypes.string,\n  ]),\n  /**\n   * The color of this input.\n   */\n  color: PropTypes.oneOfType([\n    PropTypes.oneOf([\n      'primary',\n      'link',\n      'info',\n      'success',\n      'warning',\n      'danger',\n      'dark',\n      'text',\n    ]),\n    PropTypes.string,\n  ]),\n  /**\n   * Whether this input should be read-only.\n   * Equivalent to the readonly attribute of the `<input>` element.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Whether this input should be static.\n   * If true, this input will be readonly, and all the input decorations\n   * are removed.\n   */\n  isStatic: PropTypes.bool,\n  status: PropTypes.oneOf(['focus', 'hover']),\n  /**\n   * Whether this input is rounded. The input will have a 50% border-radius,\n   * making the left and right side fully rounded.\n   */\n  rounded: PropTypes.bool,\n  disabled: PropTypes.bool,\n  renderAs: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.string,\n    PropTypes.object,\n  ]),\n};\n\nInput.defaultProps = {\n  renderAs: 'input',\n};\n\nexport default Input;\n"],"file":"input.js"}